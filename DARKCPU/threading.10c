;;
;
;\section mutlithreading Threading
;
;\subsection mutlithreadingDetails Module Details
;\anchor ThreadingManager
;\details This module is responsible for hadling a large portion of the multithreading in the operating system. This subsystem performs threading operations such as creating or destorying threads, halting/resuming threads, changing a thread's context and swapping threads on interrupt triggers.
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 15, 2012
;
;\subsection threads Threads
;A thread in DarkCPU defines a single stream of execution throughout memory. The kernel will swap between these streams of execution very quickly, giving the system an illusion that multiple 
;streams are being executed parallel to one-another. Each stream acts as if it were an individual processor on the system, each with their own ThreadContext structure, descirinbg the execution stream's state of
;context sinsitive data carried by the cpu such as the registers. Each thread will also have their own stack structure allocated for them as well.
;
;In DarkCPU, threads are specifically just threads. They are not 'owned' by their parent process. Each process can spawn several threads, and a thread can be spawned from no particular process. 
;Threads are commonly used in conjunction with executable images to perform the tasks described by the executable image and are thus used very frequently when developing applications or drivers for the operating system. 
;It is important to note that a thread is not at all required for an application, and the lack of a thread running inside of an application does not make that application any less valid.
;
;The threading manager keeps track of all active threads by sorting a linked list of the threads' ThreadContext strucutres (\ref ThreadContextLayout), with the root entry of this list defined in the \ref threading_rootThread
;variable. The threading manager will set \ref threading_activeThread to point to the active thread's ThreadContext structure. When it is time to swap threads, the threading manager will save the state
;of the active thread into it's respective ThreadContext structure, and walk down the linked list to the next thread. It will then proceed to put the DCPU processor into the state described by that thread's
;ThreadContext structure, and resume execution.
;
;Each thread is also assigned a unique identification value, which is equal to the base address of their ThreadContext structure in memory.
;
;If there are no registered threads in the system, the threading system will execute the \ref threading_interrupt_idleThread routine, where it waits for a thread to execute.
;
;When the thread's entrypoint returns, the thread returns to \ref threading_endOfThread, where it is destroyed and control is passed on to another thread.
;
;****
;\subsection lockingthreadm Locking Thread Manager
;\anchor LockingTheThreadManager
;If a given thread is performing a time-sensitive operation or if the thread is accessing a device or memory location and needs to ensure exclusive access to this resource (refer to a higher-level method of doing with with the \ref MutexManager), the
;threading manager can be placed into a locked state. That is, whichever thread requests a lock, will consistantly be the only thread executing on the system until it has restored
;the threading manager to an unlocked state. If possible, one should use a Mutex (\ref Mutexes) to ensure synchronization of resource access, however if they are executing outside of a threaded environment or
;are unable to Initialize the \ref MutexManager, the threading manager can be locked.
;
;The Threading Manager's State can be locked and unlocked by using the threading_lock and threading_free routines respectivley.
;
;The state of the threading manager is stored inside of the threading_state variable.
;
;****
;\subsection threadingTeb TEB
;\note This has not yet been implemented.
;The thread environment block is a structure located inside of the TreadContext strucutre. The thread environment block is pointed to by the Z register of the thread when the thread is created. It is
;the responsiblity of the code to maintain the Z register if it wishes to access the thread context strucutre. All functions in the DCPU kernel assumes the Z register points to the thread's ThreadContext 
;structure when they are entered.
;
;****
;\subsection threadingContext ThreadContext
;\anchor ThreadContextLayout
;Offset                           		| Member Name       | Description of Member
;---------------------------------------|-------------------|----------------------
; THREADCONTEXT_OFFSET_PC               | regPc    			| Stores the state of the 'PC' register the last time this thread swapped from being active to inactive.
; THREADCONTEXT_OFFSET_SP             	| regSp             | Stores the state of the 'SP' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_EX             	| regEx             | Stores the state of the 'EX' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_A  				| regA              | Stores the state of the 'A' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_B 				| regB              | Stores the state of the 'B' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_C 				| regC              | Stores the state of the 'C' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_X 				| regX              | Stores the state of the 'Z' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_Y 				| regY              | Stores the state of the 'Y' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_Z 				| regZ              | Stores the state of the 'Z' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_I 				| regI              | Stores the state of the 'I' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_J 				| regJ              | Stores the state of the 'J' register the last time this thread swapped from being active to inactive
; THREADCONTEXT_OFFSET_NEXT 			| pNextThread       | Points to the next thread in the linked list of threads, or to THREADING_INVALIDENTRY if the ThreadContext is the last in the list
; Start of the TEB Block                | N\A               | N\A
; THREADCONTEXT_TEB_OFFSET				| pTeb				| Points to the start of the Thread Environment Block.
; THREADCONTEXT_TEB_OFFSET_PARENTIMAGE	| pParentImage		| Pointer to the executable image which this thread belongs to, or null if it does not belong to an executable
; THREADCONTEXT_TEB_OFFSET_SEHCHAIN		| pTebSehChain		| Pointer to the first SEH entry in the thread's SEH chain. Refer to \ref ExceptionManager
; Start of the Stack Memory Region      | N\A               | N\A
;          ...                          | Thread Stack      | Memory allocated for the thread's stack
; THREADCONTEXT_OFFSETEND               |                   | Offset to the last word in the ThreadContext. This is the initial value of SP for the thread.
;
;;

;;
;\type WORD
;\details Used to state the pNextThread entry in the ThreadContext structure is invalid. If this is encountered, it means that there is no next entry in the chain of threads (i.e, the thread is the last in the chain.)
;;
#define THREADING_INVALIDENTRY 					0xFFFF

;;
;\type WORD
;\details Equal to the size of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_SIZE     					256

;;
;\type WORD
;\details Defines the offset to the end of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_END   			  	255

;;
;\type WORD
;\details Defines the offset to the regPc member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_PC 				0

;;
;\type WORD
;\details Defines the offset to the regSp member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_SP 				1

;;
;\type WORD
;\details Defines the offset to the regEx member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_EX 				2

;;
;\type WORD
;\details Defines the offset to the regA member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_A  				3

;;
;\type WORD
;\details Defines the offset to the regB member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_B  				4

;;
;\type WORD
;\details Defines the offset to the regC member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_C  				5

;;
;\type WORD
;\details Defines the offset to the regX member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_X  				6

;;
;\type WORD
;\details Defines the offset to the regY member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_Y  				7

;;
;\type WORD
;\details Defines the offset to the regZ member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_Z  				8

;;
;\type WORD
;\details Defines the offset to the regI member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_I  				9

;;
;\type WORD
;\details Defines the offset to the regJ member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_J  				10

;;
;\type WORD
;\details Defines the offset to the pNext member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_OFFSET_NEXT			  	11

;;
;\type WORD
;\details Defines the offset to the THREADCONTEXT_TEB_OFFSET member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_TEB_OFFSET				12

;;
;\type WORD
;\details Defines the offset to the THREADCONTEXT_TEB_OFFSET_PARENTIMAGE member of the ThreadContext structure. Refer to \ref ThreadContextLayout
;;
#define THREADCONTEXT_TEB_OFFSET_PARENTIMAGE	12

;;
;\type WORD
;\details Defines the state of the threading system. This value is used to symbolize the normal state. Refer to \ref LockingTheThreadManager
;;
#define THREADING_STATE_NORMAL 0

;;;
;Ends a threads current cycle. Automatically frees threading system if it is locked.
;;;
#macro _threading_endCycle() {
		INT INTERRUPT_MESSAGE_THREADENDCYCLE
}

;;
;\type THREADCONTEXT*
;\details Stores a pointer to the currently active thread's ThreadContext structure, or is equal to \ref THREADING_INVALIDENTRY if there are no registered threads.
;;
:threading_activeThread
	dat THREADING_INVALIDENTRY

;;
;\type THREADCONTEXT*
;\details Stores a pointer to the root of the linked list of active threads in the system, or \ref THREADING_INVALIDENTRY if there are no registered threads. 
;;
:threading_rootThread
	dat THREADING_INVALIDENTRY

;;
;\type THREADINGSTATE*
;\details Stores the current state of the threading system. I.e, \ref THREADING_STATE_NORMAL or \ref THREADING_STATE_LOCKED
;;
:threading_state
DAT THREADING_STATE_NORMAL


;;
;\details Ends the threads current cycle and passes execution on to the next chain. Internally, this just contains the _threading_endCycle() macro followed by a return. If possible, the _threading_endCycle() macro should be used instead to reduce overhead. If the threading system is locked when this function is called, it is automatically freed.
;\return(VOID) No return value.
;\call nakedcall
;;
threading_endCycle:
		_threading_endCycle()
		ret


;;
;\call cdecl
;\details Creates a new thread at a specified origin. The thread can also be passed an argument when created which will be stored in its A register.
;\param(VOID*, pEntryPoint) Pointer to where this thread should start executing in memory. The entry point is called with the \ref asyncCall calling convention.
;\param(WORD, wArgument) Argument to pass to the thread's entrypoint. Refer to \ref asynccall for details on how this argument is transfered.
;\return(VOID*) Returns the base address of the thread's ThreadContext structure, which can be interpreted as the threads ID.
;;
threading_createThread:
		_sfBegin(0)
		
		_push [z + THREADCONTEXT_TEB_OFFSET_PARENTIMAGE]
		_sfArg(push, 1)
		_sfArg(push, 0)
		call threading_createThreadEx
		add sp, 3
		
		_sfEnd()
		ret

;;
;\details Creates a new thread at a specified origin. The thread can also be passed an argument when created which will be stored in its A register.
;\param(VOID*, pEntryPoint) Pointer to where this thread should start executing in memory. The entry point is called with the \ref asyncCall calling convention.
;\param(WORD, wArgument)  Argument to pass to the thread's entrypoint. Refer to \ref asyncCall for details on how this argument is transfered.
;\param(IMAGE*, pParentImage) Pointer to the executable image of this thread's parent.
;\return(VOID*) Returns the base address of the thread's ThreadContext structure, which can be interpreted as the threads ID.
;\call cdecl
;;
threading_createThreadEx:
		_sfBegin(0)
		call threading_lock 											;Lock the threading system to assure it does not change\access any threading structures as we mutate them.
	
		_push THREADCONTEXT_SIZE										;Allocate thread's ThreadContext structure.
		call memory_allocate
		add sp, 1
		
		_sfArg([a + THREADCONTEXT_OFFSET_PC], 0)						;Set the thread's TheadContext's regPc to the first argument, pEntryPoint, so that when it is swapped to, it begins executing at that address.
		_sfArg([a + THREADCONTEXT_OFFSET_A], 1)							;Set the thread's TheadContext's regA to the secont argument, wArgument, so that when it is swapped to, it begins executing with the 'A' register equal to the argument passed to the thread.
		_sfArg([a + THREADCONTEXT_TEB_OFFSET_PARENTIMAGE], 2)			;Set the thread's ThreadContext TEB's to reference a parent executabe image described in the arguments.
		
		set [a + THREADCONTEXT_OFFSET_Z], a								;Setup Z register such that it points to the thread's ThreadContext structure.
		
		set [a + THREADCONTEXT_OFFSET_NEXT], THREADING_INVALIDENTRY		;Assure that the NEXT entry of this thread is invalid (i.e, it is the last entry in the linked list)
		
		;Below code 'pushes' a return address of threading_endOfThread onto the stack.
		set c, a
		add c, THREADCONTEXT_OFFSET_END
		set [c], threading_endOfThread
		set [a + THREADCONTEXT_OFFSET_SP], c
		
		;Loop attempts to append thread to linked list of threads.
		ife [threading_rootThread], THREADING_INVALIDENTRY				;If the root thread is invalid (i.e, there are no active threads on the system.)
			jmp threading_createThreadEx_rootEntry						;Set this new thread as the root thread.
			
		set y, [threading_rootThread]									;Otherwise iterate over threads in linked list and look for one that has a free next entry (i.e, a next entry that is not valid) and link our new thread to that one.
		
		threading_createThreadEx_seekLastLoop:
			ife [y + THREADCONTEXT_OFFSET_NEXT],  THREADING_INVALIDENTRY
				jmp threading_createThreadEx_createEntry
				
			set y, [y + THREADCONTEXT_OFFSET_NEXT]
			jmp threading_createThreadEx_seekLastLoop
			
	threading_createThreadEx_createEntry:
		set [y + THREADCONTEXT_OFFSET_NEXT], a
		jmp threading_createThreadEx_end
			
	threading_createThreadEx_rootEntry:
		set [threading_rootThread], a
		
	threading_createThreadEx_end:
		_push a
		call threading_free
		_pop a
			
		_sfEnd()
		ret
	
;;
;\call cdecl
;\details Removes a specified thread from the linked list of threads, and deallocates its ThreadContext structure. If this thread is the active thread, the thread is removed and control is passed on to the next thread in the list.
;\param(THREADCONTEXT*, pThreadContext) A pointer to the threads ThreadContext structure, otherwise known as the thread's ID.
;\return(STATUS) Returns 0 on error, and anything else otherwise.
;;
threading_removeThread:
		_sfBegin(0)
		call threading_lock ;Must be done do avoid half a threading entry from being deleted.
		
		set a, 0 ;design of routine counts on the fact that this register is not used unless there were no errors
				 ;and that if there aren't errors, it is set to something other than 0
				 
		set y, [threading_rootThread]
		
		; If thread being removed equals the active thread
		; Set active thread to INVALIDENTRY
		_sfArg(c, 0)
		ife c, [threading_activeThread]
			set [threading_activeThread], THREADING_INVALIDENTRY
			
		; If thread being removed is the root entry
		ife y, c
			jmp threading_removeThread_removeRoot ;Skip the search and remove the root entry.
			
		threading_removeThread_seekParentThreadLoop:
			ife [y + THREADCONTEXT_OFFSET_NEXT],  THREADING_INVALIDENTRY
				jmp threading_removeThread_endOfList
				
			ife [y + THREADCONTEXT_OFFSET_NEXT],  c
				jmp threading_removeThread_seekParentThreadLoop_end
			
			set y, [y + THREADCONTEXT_OFFSET_NEXT]
			jmp threading_removeThread_seekParentThreadLoop
			
	threading_removeThread_seekParentThreadLoop_end:
		set [y + THREADCONTEXT_OFFSET_NEXT], [c + THREADCONTEXT_OFFSET_NEXT]
		
	threading_removeThread_removeEntry:
		call threading_free ;Important that threading_lock to threading_free only scopes where required, otherwise deadlocks can occur when a locked mutex is encountered.
		_push THREADCONTEXT_SIZE
		_push c
		call memory_free
		add sp, 2
		jmp threading_removeThread_end
		
	threading_removeThread_endOfList: 	;NOTE ABOVE TO A REGISTER
		
		call threading_free ;if jumped to due to error, 'A' register should be zero
		;If active thread is now invalid (due to our remove operation)
		;pass control to to next thread
	threading_removeThread_end:
		_sfEnd
		ret
	
	threading_removeThread_removeRoot:
		set [threading_rootThread], [y + THREADCONTEXT_OFFSET_NEXT]
		jmp threading_removeThread_removeEntry
	
;;
;\details Locks the threading manager such that the calling thread is the only thread executed on the system until the threading system is freed. Regier to \ref LockingTheThreadManager
;\return(VOID) No return data.
;\call cdecl
;;
threading_lock:
		add [threading_state], 1
		ret

;;
;\details Releases the threading manager placing it back into its normal state. All threads will execute on the system and the calling thread may be interrupted at any time. Regier to \ref LockingTheThreadManager
;\return(VOID) No return data.
;\call cdecl
;;
threading_free:
		sub [threading_state], 1
		ret	

;;
;\details Once a thread has finished performing its task, and returns from its path of execution, it will return to this function. Here the thread will be destroyed.
;\return(VOID) No return data.
;\call cdecl
;;
threading_endOfThread:
		set a, sp 					; 'A' register will be equal to address of last data member in structure + 1 (because it just popped off the return)
		sub a, THREADCONTEXT_SIZE 	;because it is equal to last data + 1, it is effectivley base + the size of the structure
		_push A
		call threading_removeThread
		int INTERRUPT_MESSAGE_THREADENDCYCLE
;;
;\details Invoked by the \ref ClockDriver on equal intervals. When invoked, this routine is tasked with the procedure of determining if control should be passed to the next thread, and passing control if it should
;\return(VOID) No return data.
;\call cdecl
;;
threading_interrupt:
		ifn [threading_state], THREADING_STATE_NORMAL
			rfi A
		
		ife [threading_activeThread], THREADING_INVALIDENTRY
			jmp threading_interrupt_skipStore
			
		set A, [threading_activeThread]
		_pop [a + THREADCONTEXT_OFFSET_A]	;Pop the A register and PC from stack, refer to naked-isr convention
		_pop [a + THREADCONTEXT_OFFSET_PC]
		
		set [a + THREADCONTEXT_OFFSET_EX], EX
		set [a + THREADCONTEXT_OFFSET_SP], SP
		
		set [a + THREADCONTEXT_OFFSET_B], B
		set [a + THREADCONTEXT_OFFSET_C], C
		set [a + THREADCONTEXT_OFFSET_X], X
		set [a + THREADCONTEXT_OFFSET_Y], Y
		set [a + THREADCONTEXT_OFFSET_Z], Z
		set [a + THREADCONTEXT_OFFSET_I], I
		set [a + THREADCONTEXT_OFFSET_J], J
	
		jmp threading_interrupt_endOfThreadStore
		
	threading_interrupt_skipStore:
		add sp, 2	; POP A and PC off of stack.
	
	threading_interrupt_endOfThreadStore:
		set A, [threading_activeThread]
		
		ifn a, THREADING_INVALIDENTRY
			set [threading_activeThread], [a+ THREADCONTEXT_OFFSET_NEXT]
			
		ife [threading_activeThread], THREADING_INVALIDENTRY
			set [threading_activeThread], [threading_rootThread]
		
		ife [threading_activeThread], THREADING_INVALIDENTRY
			jmp threading_interrupt_idleThread
		
		set a, [threading_activeThread]
		
		set j, [a+ THREADCONTEXT_OFFSET_J]
		set i, [a+ THREADCONTEXT_OFFSET_I]
		set z, [a+ THREADCONTEXT_OFFSET_Z]
		set y, [a+ THREADCONTEXT_OFFSET_Y]
		set x, [a+ THREADCONTEXT_OFFSET_X]
		set b, [a+ THREADCONTEXT_OFFSET_B]
		set c, [a+ THREADCONTEXT_OFFSET_C]
		
		set ex, [a+ THREADCONTEXT_OFFSET_EX]
		set sp, [a+ THREADCONTEXT_OFFSET_SP]
		
		add a, THREADCONTEXT_OFFSET_PC
		
		_push [a] ; Push the thread's pc to the stack
		_push [a+ THREADCONTEXT_OFFSET_A]	;Set a register appropriately
		rfi a
		
	threading_interrupt_idleThread:
		_push threading_interrupt_idleThreadLoop
		_push 0
		rfi a
	threading_interrupt_idleThreadLoop:
		jmp threading_interrupt_idleThreadLoop
		
	threading_returnToThread:
		