;;
;\section KernelMain Kernel
;\subsection mainmoddet Module Details
;\anchor BootCode
;\details This module contains the boot code for the kernel image, and is the first module executed in the kernel. This module is 
;responsible for setting up kernel critical components such as the memory manager, device manager, 
;interrupts aswell as initializing the threading manager and the clock driver.  
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 14, 2012
;\warning Use caution with use of modules such as the \ref MemoryManager or \ref DeviceManager as they may not yet be initilized.
;Also note that if you are not inside of a thread (i.e you are still in the \ref BootCode \ref main routine) use of any threading
;module such as \ref Mutex or \ref ThreadingManager may cause issues unless these routines explicitly state they can be used outside of a thread.
;\warning The bootcode is under the assumption that the initrd is mounted at index 0 when it is executed.
;
;;

jmp kernel_main

;;
;\details kernel_image_header A pointer to the base of the Kernel Image Header
;\type IMAGE*
;;
:kernel_image_header
kernel_signature:
	dat PEIMAGE_SIGNATURE

kernel_header_next:
	dat rsfs_header ;This is treated as a 'Next' entry and not FileFlags as soon as the kernel is loaded due to configuration of peLoader

kernel_name:
	dat 0x656b, 0x6e72, 0x6c65, 0, 0, 0, 0, 0, 0, 0 ;cstring of 'kernel'

kernel_rva_ep:
	dat 0

kernel_rva_import:
	dat 0
	
kernel_rva_export:
	dat kernel_export_table - kernel_image_header
	
kernel_rva_relocation:
	dat 0
	
kernel_rva_sigHandler:
	dat 0

kernel_header_size:
	dat __IMGSIZE

kernel_import_table:
	dat 0xFFFF
	dat 0xFFFF

kernel_export_table:
	dat memory_reserve						; 0
	dat memory_allocate
	dat memory_free
	dat memory_copy
	
	dat graphics_writeString				; 4
	dat graphics_verticalShift				; 5
	
	dat userInterfaceState_createState		; 6
	dat userInterfaceState_destroyState	
	dat userInterfaceState_getVram
	dat userInterfaceState_setActive
	dat userInterfaceState_clearActiveState
	
	dat threading_createThread				;11
	dat threading_createThreadEx
	dat threading_removeThread
	dat threading_lock						
	dat threading_free
	
	dat mutex_create						;16
	dat mutex_destroy
	dat mutex_lock
	dat mutex_release
	dat mutex_wait
	
	dat device_allocateDevice				;21
	dat device_freeDevice
	dat device_getDeviceInterruptMessage
	
	dat peLoader_findImage					;24
	dat peLoader_findImageEx
	dat peLoader_initImage
	dat peLoader_loadImage
	dat peLoader_findExport
	
	dat vfs_getMountFilesystem				;29
	dat vfs_getMountMediaStorage
	dat vfs_findFreeMount
	dat vfs_createMount
	dat vfs_endMount
	dat vfs_fOpenFile
	dat vfs_fGetRoot        				;35
	dat vfs_fOpen
	dat vfs_fClose
	dat vfs_fRead
	dat vfs_fEnum
	
	dat clock_getTicks
	
	;The string APIs are for INTERNAL USE ONLY and SHOULD NOT be exported, but for sandboxing
	;they are temporarily accessible (other applications should be using the libc implementation.)
	;For this reason, they should remain at the end of the table until they're removed.
	dat string_compare					;41
	dat string_singlebyteToWideChar
	dat string_replace
	dat string_length
	
	dat vfs_fOpenFileW					;45
	dat peLoader_root
	
	dat signal_dispatch					;47
	dat peLoader_unloadImage
	
	dat string_indexOfString			;49
	dat string_stoi						;50
	
	dat 0xFFFF
	
;;
;\details kernel_sBootstrapName A pointer to a string describing the name of the bootstrap in the initrd.
;\type CHAR*
;;
kernel_sBootstrapName:
	;dat 0x6f62, 0x746f, 0x7473, 0x6172, 0x0070 ;cstring of 'bootstrap'
	DAT 0x6574, 0x6D72, 0x6e69, 0x6c61, 0

;;
;\call nakedcall
;\details The entrypoint of the kernel's bootcode. This routine is responsible for initilizing the memory manager, reserving the kernel region as well as preparing the Interrupt Service Routine and initilizing other critical modules of the kernel.
;\return(VOID) No return value.
;;
kernel_main:
		call memory_init					;Initilize the memory manager

		_push kernel_size					;Reserve the kernel memory region
		_push 0
		call memory_reserve
		add sp, 2
		
		call ramddssi_init
		
		_push kernel_image_header
		_push 0								;Create a thread for the kernel to branch off to.
		_push kernel_initThreadEp
		call threading_createThread
		add sp, 3

		call device_init					;Initlize device manager
		call userInterfaceState_init

	
		;Initilize keyboard, clock and interrupt handler modules
		call keyboard_init
		
		_push 10				;Fire off interrupt timer every 15ths of a second.
		call clock_init
		add sp, 1
		
		call interrupt_enable
		_threading_endCycle()	;Pass control on to the next thread (or idle if there are none.

;;
;\details The entrypoint of the kernel's main thread. This routine is the origin of the first thread created, but not guaranteed to be the first executed. It performs other startup tasks such as mounting the initrd and loading the bootstrap.
;\return(VOID) No return value
;\call cdecl
;;
kernel_initThreadEp:
		;important that any init code that might through interrupts is done here (modules depend on threading system)
		
		_sfBegin(VFS_FILE_SIZE * 2)		;Allocate enough space for file descriptor
		
		_push rsfs_header
		_push ramddssi_header
		call vfs_createMount
		add sp, 2
		
		_sfLocalPtr(push, VFS_FILE_OFFSET_LASTMEMBER) 	; Push pointer to bootstrap descriptor onto stack.
		_push 0
		call vfs_fGetRoot
		add sp, 2
		
		_sfLocalPtr(push, VFS_FILE_OFFSET_LASTMEMBER + VFS_FILE_SIZE) ; Push pointer to dest file descriptor.
		_push kernel_sBootstrapName
		_sfLocalPtr(push, VFS_FILE_OFFSET_LASTMEMBER)   ; Push pointer to parent directory file descriptor.
		call vfs_fOpenFile
		add sp, 3
		
		ife a, 0								 		;Throw an error, bootstrap was not found
			int INTERRUPT_MESSAGE_KERNELERROR
		
		_sfLocalPtr(push, VFS_FILE_OFFSET_LASTMEMBER)   ; Push pointer to parent directory file descriptor.
		_sfLocalPtr(push, VFS_FILE_OFFSET_LASTMEMBER + VFS_FILE_SIZE) ; Push pointer to bootstrap file descriptor.
		call peLoader_loadImage
		add sp, 2
		
kernel_serviceLoop:
		call keyboard_poll
		call signal_poll
		_threading_endCycle()
		jmp kernel_serviceLoop
		ret

#segment KERNEL_END 1100

;;
;\type VOID*
;\details Can be interpreted as either a pointer to the end of the kernel, or, since the kernel is loaded at base address zero, the size of the kernel image.
;;
kernel_size:
:__IMGSIZE