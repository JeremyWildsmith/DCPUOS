;;
;\section Bitmap Bitmap
;
;\subsection bitmapDetails Module Details
;\details This module contains several routines for optimally handling a bitmap. It is used internally for things such as memory and mutex allocation bitmaps, however the routines are also exported via the kernel's export table.
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 18, 2012
;
;****
;
;\subsection Bitmaps Bitmaps
;
;A bitmap is a large array of bits which are mapped to represent a property of each object in a array of objects in memory. It is simply an array of boolean data types only each element in the array only consumes a single bit of memory.
;If an array of many objects in memory needs to have a particular property of them stored, and that property ranges between only two discrete values, a bitmap can be mapped to this array of objects to represent a this property of each individual object. Using
;bitmaps allow for optimal storage of a property for an array of objects.
;
;An example of its application would be inside of DarkCPU's memory manager. DarkCPU's memory manager uses a bitmap to describe the state of each individual Memory Chunk in memory. Since there are over a thousand chunks, representing each chunk with a word or a byte of data would cause
;an excessive waste of memory. Instead, a bitmap is used. Since there are about 1024 memory chunks in memory, and each word is 16 bits, the size of the memory allocation bitmap would only be 64 words in size.
;
;;

;;
;\call cdecl
;\details Used to set a single bit in bitmap. If more than one adjacent bits are to be set, it is much more optimal to use the \ref bitmap_nandRun procedure.
;\param(WORD,  wBitIndex)   The Index, in terms of bits, into the bitmap describing which bit is to be set in the specified bitmap.
;\param(WORD*, pBitmapBase) The base address of the bitmap in memory.
;\return(VOID)
;;
bitmap_set:
	_sfBegin(0)
	
	_sfArg(y, 0)
	_sfArg(c, 1)
	
	set a, 0x8000				; Create mask, Only MSB set
	
	div y, 16					; Calculate in which WORD this bit belongs to. There are 16 bits per word
	shr ex, 12
	shr a, ex
	
	add c, y					; Add this offset to the base
	bor [c], a					; AND mask with bitmap
	
	_sfEnd()
	ret
	
;;
;\call cdecl
;\details Used to clear a single bit in bitmap. If more than one adjacent bit is to be cleared, it is much more optimal to use the \ref bitmap_nandRun procedure.
;\param(WORD,  wBitIndex)   The Index, in terms of bits, into the bitmap describing which bit is to be cleared in the specified bitmap.
;\param(WORD*, pBitmapBase) The base address of the bitmap in memory.
;\return(VOID)
;;
bitmap_clear:
	_sfBegin(0)
	
	_sfArg(y, 0)
	_sfArg(c, 1)
	
	set a, 0x8000				; Create mask, Only MSB set

	div y, 16					; Calculate in which WORD this bit belongs to. There are 16 bits per word
	shr ex, 12
	shr a, ex					; Shift mask over x bits, where x is the mod of the above devision
	xor a, 0xFFFF
		
	add c, y					; Add this offset to the base
	AND [c], a					; XOR mask with bitmap
	
	_sfEnd()
	ret

;;
;\call cdecl
;\details Gets the state of a single specified bit in a bitmap.
;\param(WORD, wBitIndex)    The Index, in terms of bits, into the bitmap describing which bit is to have its state acquired.
;\param(WORD*, pBitmapBase) The base address of the bitmap in memory.
;\return(BOOL) The state of the bit, \ref TRUE if set.
;;
bitmap_get:
	_sfBegin(0)
	
	_sfArg(y, 0)
	_sfArg(c, 1)
	
	set a, 0x8000				; Create mask, Only MSB set
	
	div y, 16					; Calculate in which WORD this bit belongs to. There are 16 bits in a word
	shr ex, 12
	shr a,ex					; Shift mask over x bits, where x is the mod of the above devision
	
	add c, y					; Add this offset to the base
	and a, [c]					; AND mask with bitmap
	
	_sfEnd()
	ret

;;
;\call cdecl
;\details This function is specifically designed such that is can clear and set data. To perform a clear using the NAND operation, your mask must be equal to 0xFFFF. To perform a set run operation, you can use 0x0000
;\param(WORD*, pBaseAddress) The base address of the bitmap to perform this operation on
;\param(WORD, wStartIndex)   The index of the first bit of the series of bits that this operation will be applied to.
;\param(WORD, wRunLength)    The number of bits to perform this operation on, starting from wStartIndex
;\param(WORD, wMask)         Mask to apply to words when performing the NOR operation. This can be either 0x0000 or 0xFFFF Anything else will result in undefined behaviour
;\return(VOID)
;;
bitmap_nandRun:
		;Bitmap indexing is usually a cpu intensive operation and thus we optimize the looping as much as possible by using registers.
		_sfBegin(0)
		_push x
		
		;Due to alignment, the first word must be done individually to simplify & optimize the logic in the following loop:
		_sfArg(y, 1)	;Calculate the bit index into the first word that contains the start index described in the arguments
		mod y, 16
		
		;Ignore warnings, trick used to overflow ex register and quickly obtain a desired mask
		;shr 0xFFFF, y	;Create a bitmap that covers the bits we want to leave alone (i.e, preceed the start index bit)
		set c, ex
				
		set x, 0
		add x, y
		
		_sfArgAdd(x, 2)
		ifg x, 16
			set x, 16
		
		set a, 0xFFFF
		shr a, x
		bor c, a		;This bitmask stored in c defines a mask for protecting the bits we want to leave alone during the nand operation.
		
		
		sub x, y		;Calculate how many bits we applied the nand operation on, and subtract it from the total amount of bits it must be performed on.
		_sfArg(y, 2)	;Where y now holds the amount of bits left to perform the nand operation on.
		sub y, x
		
		
		_sfArg(a, 1)
		div a, 16
		_sfArgAdd(a, 0)
		
		;Now setup mask on word:
		_sfArg(x, 3)
		bor x, c ;This is our AND mask
		
		and [a], x
		xor c, 0xFFFF
		xor [a], c
		add a, 1
		
		bitmap_nandRun_nandBitsLoop:
			ife y, 0
				jmp bitmap_nandRun_nandBits_end
			
			set c, y
			
			ifg c, 16
				set c, 16
				
			sub y, c

			sub c, 16
			xor c, 0xFFFF
			add c, 1

			;Ignore warnings, trick used to overflow ex register and quickly obtain a desired mask
			shl 0xFFFF, c
			set c, ex
			_sfArg(x, 3)
			bor x, c
			and [a], x
			xor c, 0xFFFF
			xor [a], c			
			
			add a, 1
			
			jmp bitmap_nandRun_nandBitsLoop
			
		bitmap_nandRun_nandBits_end:
		_pop x
		_sfEnd()
		ret
;;
;\call cdecl
;\param(WORD*, pBaseAddress) The base address of the bitmap to perform this operation on
;\param(WORD, wSize) The size of the bitmap in words
;\param(WORD, wSeekCount) The number of contigous clear bits to find.
;\return(WORD) Returns the index of the first bit in the found contigous sequence of clear bits, or 0xFFFF if no contigous array of clear bits of the specified length was found.
;;
bitmap_findClearRun:
		
		_sfBegin(0)
		
		_push i													;registers used to optimize intensive iteration of the allocation table.
		_push x
		_push z
		
		set i, 0 												;current word index into memory_allocationBitmap
		
		_sfArg(y, 2)											;number of free bits that need to be found
		
		;Find a contigous series of 0s in the bitmap.
		
		bitmap_findClearRun_findWord:
			_sfArgIfEquals(1, i)									;If our current word index is outside of our allocation bitmap's range
				jmp bitmap_findClearRun_noRun					;and we have not found a free memory region, there is an insufficient amount of contiguous memory accessible by the system.
				
			set a, y
			
			ifg a, 16											;clamp number of bits that must be found contiguous in this word to a max of 16 (since there are only 16 bits in a word.)
				set a, 16
			
			set c, 0x8000										;Setup the bitcount to zero
			set x, 0

			_sfArg(z, 0)										;Calculate the word the value of the word at the current word index in our bitmap
			add z, i
			set z, [z]
			
			_push a												;push 'a' to the stack so that its original value can be qucikly recalled when the variable needs to be reset 
			bitmap_findClearRun_findbitsLoop:

				sub a, 1										;Assume the next bit is cleared, and subtract from the number of bits which need to be found
				ifb z, c									;if in reality it isn't, the variable is reset anyways.
					set a, [sp]									;Reset a to its initial value. We cannot use the bits if they are not contigous.

				add x, 1										;increment x, so that it represents the number of bits searched
				
				ife a, 0										
					jmp bitmap_findClearRun_findbits_end		;if a is equal to zero, we have seeked through all the bits required.
				
				shr c, 1										;shift our bitmap over 1 to check the state of the following bit
				
				ifn ex, 0										;if the above shift overflowed the c register (ex != 0), we have completed seeking through all the bits in this word, and thus end the bit search.
					jmp bitmap_findClearRun_findbits_end

				jmp bitmap_findClearRun_findBitsLoop
																
			bitmap_findClearRun_findbits_end:
				_pop c											;Pop off the number of bits that we were trying to find
				sub c, a										;Subtract from the number of bits we were trying to find by the number of more we needed to find to achieve this, which will gives us the number of bits found.

				ifn c, x										;If the number of bits processed is not equal to the number of free found bits, the search for a contigous array of zeros was interrupted by a 1
					_sfArg(y, 2)								;thus we must reset y
				
				;Subtract y by the number of bits found
				sub y, c										;Subtract from the total number of bits we must find by the number of free bits found
				
				ife y, 0										;If no more bits must be found, we found all the memory we need
					jmp bitmap_findClearRun_foundRun
						
		bitmap_findClearRun_findWordNext:
			
			add i, 1											;advance forward to the next word in memory
			jmp bitmap_findClearRun_findWord
			
	bitmap_findClearRun_foundRun:
		;Calculate the index of the last contigous bit found
		set a, i
		mul a, 16
		add a, x

		_sfArg(c, 2)

		sub a, c
		
	bitmap_findClearRun_end:
		_pop z
		_pop x													;Restore the state of the z, x, i registers
		_pop i
	
		_sfEnd()
		ret
	
	bitmap_findClearRun_noRun:

		set a, 0xFFFF											;return 0xFFFF to symbolize that there was an error allocating memory.

		jmp bitmap_findClearRun_end	
	