;;
;
;\section virtualFileSystem VFS
;
;\subsection virtualFileSystemDetails Module Details
;\details This module handles the virtual file system used by dark cpu and is responsible for
;for setting up and accessing data on mount points. It uses a Mount Point List structure.
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 19, 2012
;\warning The DarkCPU Virtual Filesystem can only communicate with storage devices which implement the DarkDev Std Storage Interface (/ref DDSSI) and filesystem interfaces drivers which implement the DarkDev Std Filesystem Interface (/ref DDSFSI)
;
;\subsection virtualFileSystemVFS Kernel VFS
;The virtual file system (VFS) module of kernel is responsible for providing a layer of abstraction between the physical structure & interface of the underlying filesystem\storage device and the software accessing the filesystem. This layer of abstraction is used
;to allow any module running over the kernel or for the kernel itself to access the filesystem where the specific details of the filesystem or storage media remain completely transparent in the process of file access.
;
;If a storage media presents a specific filesystem it wishes to give the system access to, it can have its respective filesystem interface library mounted along with the respective storage driver. The filesystem interface and the storage driver are both expected
;to implement the \ref DDSSI and \ref DDSFSI interfaces. The filesystem can be mounted to a free mountpoint using the \ref vfs_createMount routine. Once the filesystem has been mounted, its root directory can be accessed via the \ref vfs_fGetRoot routine.
;
;
;\subsection virtualFileSystemFileDesc File Descriptors
;
;All files are described using the VFSFile structure in the kernel. This structure is responsible for keeping track of data which describes the open file. Refer to \ref VFSFileLayout
;
;This is the libc implementation of FILE*.
;
;\subsection virtualFileSystemMountLayout Mount Point Layout
;Offset                                    | Member Name        | Description of Member
;------------------------------------------|--------------------|----------------------
; VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER | pMediaDriver       | Stores a pointer to the media storage driver that handles direct access to the mounted storage device.
; VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER   | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
;
;\anchor VFSFileLayout
;
;\subsection virtualFileSystemFileLayout File Layout
;Offset                       | Member Name        | Description of Member
;-----------------------------|--------------------|----------------------
; VFS_FILE_OFFSET_FILELENGTH  | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_FILEFLAGS   | dwFileFlags        | Flags which store the state of or describe properties of the file descriptor. Refer to \ref VfsFileFlags
; VFS_FILE_OFFSET_CURSOR      | dwCursor           | Defines the current read\write cursor of the file. Where zero is the start of the file, and 'x' is 'x' words from the start of the file.
; VFS_FILE_OFFSET_FILEIDHI    | dwFileIdHi         | High word of file id. The file id member can be used only internally by the filesystem driver, and in any manner the implementation of the filesystem driver deems useful.
; VFS_FILE_OFFSET_FILEIDLO    | dwFileIdLo         | Low word of file id. The file id member can be used only internally by the filesystem driver, and in any manner the implementation of the filesystem driver deems useful.
; VFS_FILE_OFFSET_MOUNTPOINT  | dwMountPoint       | An index describing the mountpoint this file's containing filesystem is mounted on.
; VFS_FILE_OFFSET_SECTORSIZE  | dwSectorSize       | The size of a single sector of the storage media.
; VFS_FILE_OFFSET_MEDIAREAD   | pfnMediaRead       | A pointer to the raw media read operation of the underlying storage device
; VFS_FILE_OFFSET_MEDIAWRITE  | pfnMediaWrite      | A pointer to the raw media write operation of the underlying storage device
;
;
;\subsection vfsFileFlags File Flags
; Flag                         | Description
;------------------------------|--------------
;VFS_FILE_FILEFLAGS_DIRECTORY  | Set when the file descriptor describes a directory
;VFS_FILE_FILEFLAGS_EOF        | EOF bit set when the cursor has reached the end of the file
;;

;;
;\type WORD
;\details Defines the max number of VFS Mount points.
;;
#define VFS_MAXMOUNTS	4

;;
;\type WORD
;\details Defines offset to the mounpoint media storage driver. \ref virtualFileSystemMountLayout
;;
#define VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER 	0

;;
;\type WORD
;\details Defines offset to the mounpoint file-system driver. \ref virtualFileSystemMountLayout
;;
#define VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER 		1

;;
;\type WORD
;\details Defines size of a mountpoint. \ref virtualFileSystemMountLayout
;;
#define VFS_MOUNTPOINT_SIZE 				2

;;
;\type WORD
;\details Defines offset to file descriptor's length member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_LENGTH      0

;;
;\type WORD
;\details Defines offset to file descriptor's flags member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_FILEFLAGS   1

;;
;\type WORD
;\details Defines offset to file descriptor's cursor member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_CURSOR      2

;;
;\type WORD
;\details Defines offset to file descriptor's High ID member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_FILEIDHI    3

;;
;\type WORD
;\details Defines offset to file descriptor's Low ID member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_FILEIDLO    4

;;
;\type WORD
;\details Defines offset to file descriptor's mountpoint member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_MOUNTPOINT  5

;;
;\type WORD
;\details Defines offset to file descriptor's sector size member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_SECTORSIZE  6

;;
;\type WORD
;\details Defines offset to file descriptor's mediaRead member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_MEDIAREAD   7

;;
;\type WORD
;\details Defines offset to file descriptor's mediaWrite member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_MEDIAWRITE  8

;;
;\type WORD
;\details Defines offset to file descriptor's last member. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_OFFSET_LASTMEMBER  	8

;;
;\type WORD
;\details Defines size of a file descriptor object. \ref virtualFileSystemFileLayout
;;
#define VFS_FILE_SIZE  			9

;;
;\type WORD
;\details Defines the max size of a file name in words.
;;
#define VFS_NAMELEN 7

;;
;\type WORD
;\details Defines the directory flag for a file descriptor. \ref vfsFileFlags
;;
#define VFS_FILE_FILEFLAGS_DIRECTORY 1

;;
;\type WORD
;\details Defines the EOF flag for a file descriptor. \ref vfsFileFlags
;;
#define VFS_FILE_FILEFLAGS_EOF       2

;;
;\type WORD*
;\details Pointer to the base of the array of mount-point structures.
;;
:vfs_mounts
:vfs_mount0
	DAT 0x0000  ;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
:vfs_mount1
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
:vfs_mount2
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
:vfs_mount3
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
;;
;\call cdecl
;\details Acquires a pointer to the filesystem driver that corresponds to given mountpoint
;\param(WORD, wMountPointIndex) The index of the mountpoint to acquire filesystem driver of
;\return(IMAGE*) Returns a pointer to the filesystem driver that corresponds to that interface, or zero if the mountpoint on that index is not used.
;;
vfs_getMountFilesystem:
		_sfBegin(0)
		
		_sfArg(a, vfs_mounts)
		mul a, VFS_MOUNTPOINT_SIZE
		add a, vfs_mounts
		
		set a, [a + VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER]
		
		_sfEnd()
		ret


;;
;\call cdecl
;\details Acquires a pointer to the storage device driver that corresponds to given mountpoint
;\param(WORD, wMountPointIndex) The index of the mountpoint to acquire storage device driver of
;\return(IMAGE*) Returns a pointer to the storage device driver that corresponds to that interface, or zero if the mountpoint on that index is not used.
;;
vfs_getMountMediaStorage:
		_sfBegin(0)
		
		_sfArg(a, vfs_mounts)
		mul a, VFS_MOUNTPOINT_SIZE
		add a, vfs_mounts
		
		set a, [a + VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER]
		
		_sfEnd()
		ret
	
;;
;\call cdecl
;\details This routine guarantees that it will return the lowest free mount index.
;\return(WORD) Returns the a pointer to a mounpoint that is free, or 0xFFFF if there are no free mountpoints.
;;
vfs_findFreeMount:
		set a, vfs_mounts
		
		vfs_findFreeMount_findDeviceLoop:
			set y, [a]
				
			ife y, 0
				jmp vfs_findFreeMount_end
					
			add a, VFS_MOUNTPOINT_SIZE
				
			jmp vfs_findFreeMount_findDeviceLoop
		
		set a, 0xFFFF
	
		vfs_findFreeMount_end:
		
		ret
	
;;
;\call cdecl
;\details This routine guarantees that the lowest free mount index will be used.
;\param(IMAGE*, pStorageDriver) Pointer to the storage device driver for this mountpoint.
;\param(IMAGE*, pFileSystemDriver) Pointer to the filesystem driver for this mountpoint.
;\return(WORD) Returns the mountpoint index used, or 0xFFFF if there were no free mountpoints.
;;
vfs_createMount:
		_sfBegin(0)
			
		call vfs_findFreeMount
		
		ife a, 0xFFFF
			jmp vfs_createMount_end
			
		_sfArg([a + VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER], 0)
		_sfArg([a + VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER], 1)
		
		;Now translate our point to the mountpoint to its corresponding index
		sub a, vfs_mounts
		div a, VFS_MOUNTPOINT_SIZE
		_push a							;Preserve our return data until it is time to return to the caller.
		
		;inform the fs driver that we are mounting this device.
		_push DDSFSI_EXPORT_FSSTARTMOUNT
		_sfArg(push, 1)
		call peLoader_findExport
		add sp, 2

		call a
		
		_pop a
	vfs_createMount_end:
		_sfEnd()
		ret

;;
;\call cdecl
;\details Unmounts a storage device on a mount point.
;\param(FILE*, pRoot) Pointer to a FILE descriptor of the root directory of the device to unmount
;\return(VOID)
;;
vfs_endMount:
		_sfBegin(0)
		
		;inform the fs driver that we are unmounting this device.
		_sfArg(a, 0)

		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FSENDMOUNT
		_push a
		call peLoader_findExport
		add sp, 2
		call a
		
		;Unmount the device.
		
		_sfArg(a, 0)
		mul a, VFS_MOUNTPOINT_SIZE
		add a, vfs_mounts
	
		set [a + VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER], 0x0000
		set [a + VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER], 0x0000
	
	vfs_endMount_end:
		_sfEnd()
		ret

;;
;\call cdecl
;\details Opens the specified file and stores its corresponding VFT_FILE structure in an output buffer.
;\param(FILE*, pParent) Pointer to the parent directory of the file that is to be open, or an initilized file descriptor for root directory.
;\param(CHAR*, sFileName) A pointer to a null-terminated ascii single-byte string describing the file's name.
;\param(FILE*, pFile) A pointer to the output file descriptor.
;\return(STATUS) Returns a zero if the file does not exist, and anything else if it has been opened correctly.
;;
vfs_fOpenFile:
		_sfBegin(0)
		
		_sfArg(a, 0)
		_sfArg(y, 2)
		
		set [y + VFS_FILE_OFFSET_MOUNTPOINT], [a + VFS_FILE_OFFSET_MOUNTPOINT]
		set [y + VFS_FILE_OFFSET_SECTORSIZE], [a + VFS_FILE_OFFSET_SECTORSIZE]
		set [y + VFS_FILE_OFFSET_MEDIAREAD],  [a + VFS_FILE_OFFSET_MEDIAREAD]
		set [y + VFS_FILE_OFFSET_MEDIAWRITE], [a + VFS_FILE_OFFSET_MEDIAWRITE]
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FOPEN
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 2)
		_sfArg(push, 1)
		_sfArg(push, 0)
		call a
		add sp, 3
		
		_sfEnd()
		ret
		
;;
;\call cdecl
;\details Opens the specified file and stores its corresponding VFT_FILE structure in an output buffer. WIDECHAR version of fOpenFile
;\param(FILE*, pParent) Pointer to the parent directory of the file that is to be open, or an initilized file descriptor for root directory.
;\param(CHAR*, sFileName) A pointer to a null-terminated ascii widechar string describing the file's name.
;\param(FILE*, pFile) A pointer to the output file descriptor.
;\return(STATUS) Returns a zero if the file does not exist, and anything else if it has been opened correctly.
;;
vfs_fOpenFileW:
		_sfBegin(VFS_NAMELEN + 1) ; buffer for name len
		
		_sfArg(a, 1)
		
		_sfLocalPtr(push, VFS_NAMELEN)
		_push a
		call string_wideCharToSingleByte
		add sp, 2
		
		_sfArg(push, 2)
		_sfLocalPtr(push, VFS_NAMELEN)
		_sfArg(push, 0)
		call vfs_fOpenFile
		add sp, 3
		
		_sfEnd()
		ret

;;
;\call cdecl
;\details Gets the root file descriptor for the filesystem. 
;\param(WORD, wMountPointIndex) Mount point index to open the root directory of.
;\param(FILE*, pFile) A pointer to the ouput file descriptor
;\return(VOID)
;;
vfs_fGetRoot:
		_sfBegin(0)
		_push i
		
		_sfArg(i, 1)
		
		set [i + VFS_FILE_OFFSET_FILEIDHI], 0
		set [i + VFS_FILE_OFFSET_FILEIDLO], 0
		set [i + VFS_FILE_OFFSET_FILEFLAGS], 0
		
		_sfArg([i + VFS_FILE_OFFSET_MOUNTPOINT], 0)
		
		;fill file descriptor with data about the storage media
		_sfArg(push, 0)
		call vfs_getMountMediaStorage
		add sp, 1

		;Init sector size
		_push DDSSI_EXPORT_GETSECTORSIZE
		_push a
		call peLoader_findExport
		call a
		set [i + VFS_FILE_OFFSET_SECTORSIZE], a
		
		;Init mediaread pointer
		set [sp + 1], DDSSI_EXPORT_READ
		call peLoader_findExport
		set [i + VFS_FILE_OFFSET_MEDIAREAD], a
		
		;Init mediawrite pointer
		set [sp + 1], DDSSI_EXPORT_WRITE
		call peLoader_findExport
		set [i + VFS_FILE_OFFSET_MEDIAWRITE], a	
		add sp, 2
		
		;Give the root directory to the filesystem interface for post-processing
		_sfArg(push, 0)
		call vfs_getMountFilesystem
		add sp, 1
		
		;Find address of fGetRoot
		_push DDSFSI_EXPORT_FGETROOT
		_push a
		call peLoader_findExport
		add sp, 2
		
		;Call the fGetRoot
		_sfArg(push, 1)
		call a
		add sp, 1
		
		_pop i
		_sfEnd()
		ret

;;
;\call cdecl
;\details Opens a file given a particular file path
;\param(CHAR*, sPath) Path of the file to open
;\param(FILE*, pFile) A pointer to the output file descriptor.
;\return(VOID)
;;
vfs_fOpen:
	;NOT IMPLEMENTED YET!!!!
	;Implement with recursive calls to fOpenFile
	int INTERRUPT_MESSAGE_KERNELERROR
	ret
	
;;
;\call cdecl
;\details Closes a specified file.
;\param(FILE*, pFile) A pointer to the file descriptor to close.
;\return(VOID)
;;
vfs_fClose:
		_sfBegin(0)
		
		_sfArg(a, 0)
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FCLOSE
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 0)
		call a
		add sp, 1
		
		_sfEnd()
		ret

;;
;\call cdecl
;\details Reads the contents of a given file descriptor. The descriptor must describe a file. Use on a directory will cause undefined behaviour.
;\param(FILE*, pFile) Pointer to file descriptor of file to be read from.
;\param(WORD*, pBuffer) Pointer to destination buffer where data is read into.
;\param(WORD, wBufferSize) The number of bytes to be read into the buffer.
;\return(WORD) The number of bytes read into buffer.
;;
vfs_fRead:
		_sfBegin(0)
		
		_sfArg(a, 0)
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FREAD
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 2)
		_sfArg(push, 1)
		_sfArg(push, 0)
		call a
		add sp, 3
		
		_sfEnd()
		ret

;;
;\call cdecl
;\Details Locates a file adjacent to the current and initilizes the file pointer to reflect this accordingly.
;\param(FILE*, pRootFile) Pointer to the parent directory where its contained files will be enumerated
;\param(FILE*, pFile) Pointer to the current file, or a root file descriptor to get the first file. This buffer is overwritten with the next file in the chain.
;\param(CHAR*, sFileName) An optional pointer to a buffer where the name of the file is stored. Must be a minimum size of RSFS_NAME_SIZE. If this argument is zero, the name is not placed into the buffer pointed to by this address.
;\return(STATUS) Returns a zero if there were no more files to enumerate.
;;
vfs_fEnum:
		_sfBegin(0)
		
		_sfArg(a, 0)
		_sfArg(y, 1)
		
		set [y + VFS_FILE_OFFSET_MOUNTPOINT], [a + VFS_FILE_OFFSET_MOUNTPOINT]
		set [y + VFS_FILE_OFFSET_SECTORSIZE], [a + VFS_FILE_OFFSET_SECTORSIZE]
		set [y + VFS_FILE_OFFSET_MEDIAREAD],  [a + VFS_FILE_OFFSET_MEDIAREAD]
		set [y + VFS_FILE_OFFSET_MEDIAWRITE], [a + VFS_FILE_OFFSET_MEDIAWRITE]
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FENUM
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 2)
		_sfArg(push, 1)
		_sfArg(push, 0)
		call a
		add sp, 3
		
		_sfEnd()
		ret
		