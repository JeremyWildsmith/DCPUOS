;;
;\section deviceManager Device
;
;\subsection deviceManagerDetails Module Details
;\details This module contains several routines that allow exclusive access to allocated devices. This module is also responsible for translating hardware interrupts to their appropriate handlers.
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 18, 2012
;
;\subsection deviceManagerDevice Device Manager
;
;The kernel implements a device manager to allow drivers to effectivley communicate with peripheral hardware devices. The device manager contains several routines for allocating and gaining
;exclusive access to a device. The device manager also enables drivers to register a callback routine that will be invoked once the allocated device attempts to communicate with the driver.
;
;When the kernel device manager module is initialized, it generates list of all peripheral devices attached to the machine. Each entry in this list is stored as a DEVICE_DEVICEENTRY \ref deviceEntryLayout. If the handler field is empty, the device is considered to be free, or not allocated.
;
;Once a device has been allocated by the device manager, it will be mapped to an approriate interrupt message code. The allocating driver must configure its device to raise interrupts using that message code so that its registered callback handler will be invoked when the device
;raises an interrupt. Mapping the device to any other interrupt message code could cause a system error. The message code for an allocated device can be found by invoknig \ref device_getDeviceInterruptMessage
;
;\subsection deviceEntryLayout Device Manager Entry
;Layout of the DeviceEntry structure
;-----------------------------------
; Offset                                    | Name      | Description
;-------------------------------------------|-----------|------------
; DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDLOW   | wHwIdLow  | Low portion of the dword describing the hardware id of the device.
; DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDHIGH  | wHwIdHigh | High portion of the dword describing the hardware id of the device.
; DEVICE_DEVICEENTRY_OFFSET_HARDWAREVERSION | wVersion  | The version number of the device.
; DEVICE_DEVICEENTRY_OFFSET_HANDLER         | pHandler  | A pointer to the callback routine which handles interrupts raised by this device, or 0 if the device has not been allocated.
;;

;;
;\type WORD
;\details Offset to the wHwIdLow member of the DeviceEntry structure. Refer to \ref deviceEntryLayout
;;
#define DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDLOW  	0


;;
;\type WORD
;\details Offset to the wHwIdHigh member of the DeviceEntry structure. Refer to \ref deviceEntryLayout
;;
#define DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDHIGH 	1

;;
;\type WORD
;\details Offset to the wVersion member of the DeviceEntry structure. Refer to \ref deviceEntryLayout
;;
#define DEVICE_DEVICEENTRY_OFFSET_HARDWAREVERSION 	2

;;
;\type WORD
;\details Offset to the pHandler member of the DeviceEntry structure. Refer to \ref deviceEntryLayout
;;
#define DEVICE_DEVICEENTRY_OFFSET_HANDLER 			3

;;
;\type WORD
;\details Size of DeviceEntry structure in words. Refer to \ref deviceEntryLayout
;;
#define DEVICE_DEVICEENTRY_SIZE						4

;;
;\type WORD
;\details Defines the maximum number of support peripheral devices.
;;
#define DEVICE_DEVICEENTRY_MAXENTRIES				16

;;
;\type WORD
;\details Defines the maximum possible valid DeviceEntry index into the internal list of DeviceEntry.
;;
#define DEVICE_DEVICEENTRY_MAXENTRYINDEX			15

;;
;\type WORD
;\details Defines the value given to an invalid DeviceEntry entry.
;;
#define DEVICE_DEVICEENTRY_INVALIDENTRY				0xFFFF

;;
;\type WORD
;\details Internal data table where the state of all the attached peripheral devices are stored.
;;
:device_deviceEntryTable
	dat 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
	dat 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
	dat 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
	dat 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000

;;
;\call cdecl
;\details This routine is responsible for initilizing the device manager module. It begins by initilizing the internal device entry table and gathering information about all attached peripheral devices.
;\return(VOID)
;;
device_init:
		_push b 	; cdecl calling convention states these must be preserved.
		_push x		; Preserve x & Y
		_push i
		
		hwn i	; Store the number of peripheral devices into A
	
		ifg i, DEVICE_DEVICEENTRY_MAXENTRIES
			set i, DEVICE_DEVICEENTRY_MAXENTRIES
		
		device_init_findLoop:
			sub i, 1								; Decrement A by 1
			ife i, 0xFFFF							; If A was 0 when we subtracted 1
				jmp device_init_findLoop_end 		; We are done enumerating through all devices, end the loop.
	
			hwq i
			
			set x, i
			mul x, DEVICE_DEVICEENTRY_SIZE
			add x, device_deviceEntryTable
			
			set [x + DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDLOW], a
			set [x + DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDHIGH], b
			set [x + DEVICE_DEVICEENTRY_OFFSET_HARDWAREVERSION], c
				
			jmp device_init_findLoop
			
	device_init_findLoop_end:
	
		_pop i			; Restore registers state
		_pop x
		_pop b
		ret
		
;;
;\call cdecl
;\details Used to acquire the appropriate interrupt message corresponding to a given device index.
;\param(WORD, wDeviceIndex) Index of the device to acquire the corresponding interrupt message code for.
;\return(WORD) The interrupt message code which corresponds to the provided device index
;;
device_getDeviceInterruptMessage:	
		_sfBegin(0)
		_sfArg(a, 0)
		
		bor a, INTERRUPT_DEVICEMASK
		
		_sfEnd()
		ret

;;
;\call cdecl
;\details Used to acquire the appropriate device index corresponding to the given device id
;\param(WORD, wDeviceIdLow) Lower word of the id corresponding to the device that is to be found.
;\param(WORD, wDeviceIdHigh) Higher word of the id corresponding to the device that is to be found.
;\param(WORD, wStartIndex) The index from which to begin the search
;\return(WORD) Returns DEVICE_DEVICEENTRY_INVALIDENTRY if no device found, otherwise returns the index of the device.
;;
device_findIndexOfDevice:
		_sfBegin(0)
		_sfArg(a, 2)
	
		device_findIndexOfDevice_findDeviceLoop:
			ife a, DEVICE_DEVICEENTRY_MAXENTRIES
				jmp device_findIndexOfDevice_deviceNotFound
			
			set c, a
			mul c, DEVICE_DEVICEENTRY_SIZE
			add c, device_deviceEntryTable
			
			ife [c + DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDLOW], 0
				jmp device_findIndexOfDevice_deviceNotFound
			
			_sfArgIfNotEquals(0, [c + DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDLOW])
				jmp device_findIndexOfDevice_findDeviceLoop_nextDevice
			
			_sfArgIfNotEquals(1, [C + DEVICE_DEVICEENTRY_OFFSET_HARDWAREIDHIGH])
				jmp device_findIndexOfDevice_findDeviceLoop_nextDevice
	
			jmp device_findIndexOfDevice_end
			
			device_findIndexOfDevice_findDeviceLoop_nextDevice:
				add a, 1
				jmp device_findIndexOfDevice_findDeviceLoop
				
	device_findIndexOfDevice_end:
		_sfEnd()
		ret
			
	device_findIndexOfDevice_deviceNotFound:
		set a, DEVICE_DEVICEENTRY_INVALIDENTRY
		jmp device_findIndexOfDevice_end

;;
;\call cdecl
;\details Used to allocate and gain exclusive access to a device.
;\param(WORD, wDeviceIdLow) Lower word of the id corresponding to the device that is to be found.
;\param(WORD, wDeviceIdHigh) Higher word of the id corresponding to the device that is to be found.
;\param(WORD, pInterruptHandler) Callback routine invoked via \ref naked-isr calling convention whenever this allocate device raises an interrupt. If this entry is 0, an internal handler which performs no function is used instead. Note though that even if this parameter is zero, you must still configure the device using the proper interrupt message code.
;\return(WORD) Returns DEVICE_DEVICEENTRY_INVALIDENTRY if no device found, otherwise returns the index of the device.
;;
device_allocateDevice:
	_sfBegin(0)
	_push 0
	_sfArg(push, 1)		;Setup stack for calling findIndex
	_sfArg(push, 0)
	
	device_allocateDevice_findDeviceLoop:
		ife [sp+2], DEVICE_DEVICEENTRY_MAXENTRIES		;If current index exceed max entries
			jmp device_allocateDevice_deviceNotFound	;We searched all the devices and were unable to locate that device. Return error.
		
		call device_findIndexOfDevice

		ife a, DEVICE_DEVICEENTRY_INVALIDENTRY
			jmp device_allocateDevice_deviceNotFound
		
		mul a, DEVICE_DEVICEENTRY_SIZE
		add a, device_deviceEntryTable
		
		ife [a + DEVICE_DEVICEENTRY_OFFSET_HANDLER], 0
			jmp device_allocateDevice_deviceFound
		
		add [sp+2], 1
		jmp device_allocateDevice_findDeviceLoop
		
	device_allocateDevice_deviceFound:
		
		_push A
		call threading_lock
		
		set a, [sp]
		
		_sfArg(c, 2)
		
		ife c, 0
			set c, device_defaultInterruptHandler
			
		set [a + DEVICE_DEVICEENTRY_OFFSET_HANDLER], c
		
		call threading_free
		
		_pop a
		sub a, device_deviceEntryTable
		div a, DEVICE_DEVICEENTRY_SIZE
		
		add sp, 3
		_sfEnd()
		ret
		
	device_allocateDevice_deviceNotFound:
		set a, DEVICE_DEVICEENTRY_INVALIDENTRY
		add sp, 3
		_sfEnd()
		ret

;;
;\call cdecl
;\details Used to to free a previously allocated allocate.
;\param(WORD, wDeviceIndex) The index of the device to be freed
;\return(WORD) Returns a 0 if the operation failed due to the given index being out of range, and anything else if it was a success.
;;
device_freeDevice:
		_sfBegin(0)
		
		_sfArgIfEquals(0, DEVICE_DEVICEENTRY_MAXENTRYINDEX)
			jmp device_freeDevice_outOfRange
		
		_sfArg(c, 0)
		mul c, DEVICE_DEVICEENTRY_SIZE
		add c, device_deviceEntryTable
		
		_push c
		call threading_lock
		
		_pop c
		set [c + DEVICE_DEVICEENTRY_OFFSET_HANDLER], 0
		
		call threading_free

		set a, 1
		_sfEnd()
		ret
		
	device_freeDevice_outOfRange:
		set A, 0
		_sfEnd()
		ret
		

;;
;\call isrcall
;\details Interrupt handler assigned to devices which have been allocated but have not been provided a callback routine. This callback routine fills there place and performs no function.
;\return(VOID)
;;
device_defaultInterruptHandler:
	rfi a

;;
;\call isrcall
;\details The device manager's interrupt handler. This handler is invoked whenever a configured device has raised an interrupt and is responsible for forwarding these interrupts to their appropriate registered handlers.
;\return(VOID)
;;
device_interruptHandler:
	_push ex ; ex must be preserved, all device interrupt handles must restore before rfi
	and a, 0x00FF
	
	ifg a, DEVICE_DEVICEENTRY_MAXENTRYINDEX
		int INTERRUPT_MESSAGE_KERNELERROR

	mul a, DEVICE_DEVICEENTRY_SIZE
	add A, device_deviceEntryTable
	set a, [A + DEVICE_DEVICEENTRY_OFFSET_HANDLER]
	
	jmp a