
;REMOVE THE -stnacs_image_header when you put this in a seperate executable...

#define SHELLINSTANCE_SIZE 						450

stnacs_image_header:
header_signature:
	DAT 0x10C

header_next:
	DAT	0
	
header_name:
	DAT 0x7473, 0x616e, 0x7363, 0, 0, 0, 0, 0, 0, 0 ; cstring of 'stnacs'
	
header_rva_ep:
	DAT main - stnacs_image_header
	
test_program_rva_import:
	DAT header_import_table - stnacs_image_header
test_program_rva_export:
	DAT header_export_table - stnacs_image_header
test_program_rva_offset:
	DAT header_relocations - stnacs_image_header
test_program_rva_sigHandler:
	DAT signal_handler - stnacs_image_header
test_program_size:
	DAT 0 ; Specified by pe loader
	
header_import_table:
	dat 0x656b, 0x6e72, 0x6c65, 0, 0, 0, 0, 0, 0, 0 ; cstring of 'kernel'
import_memory_allocateMemory:
	DAT 1
import_memory_freeMemory:
	DAT 2
import_string_compare:
	dat 41
import_string_length:
	dat 44
import_vfs_fGetRoot:
	dat 35
import_vfs_fEnum:
	dat 39
import_vfs_fOpenFileW:
	dat 45
import_vfs_string_replace:
	dat 43
import_memory_copy:
	dat 3
import_peLoader_root:
	dat 46
import_string_singlebyteToWideChar:
	dat 42
import_peLoader_loadImage:
	dat 27
import_peLoader_unloadImage:
	dat 48
import_signal_dispatch:
	dat 47
import_string_indexOfString:
	dat 49
import_string_stoi:
	dat 50
	DAT 0xFFFF
	dat 0x7874, 0x6974, 0x006f, 0, 0, 0, 0, 0, 0, 0 ;cstring of 'txtio'
import_shell_createShell:
	DAT 0
import_shell_writeString:
	DAT 1
import_shell_processInput:
	DAT 2
import_shell_newLine:
	dat 3
import_shell_destroy:
	dat 4
	DAT 0xFFFF
	DAT 0x696E, 0x0063, 0, 0, 0, 0, 0, 0, 0, 0 ; cstring of 'nic'
import_nic_send:
	dat 0
	dat 0xFFFF
	DAT 0xFFFF
header_export_table:
	DAT 0xFFFF
header_relocations:
	DAT 0xFFFF

inputState:
	DAT	0xFFFF

inputStateVram:
	DAT 0xFFFF

shell_prompt:
	dat	">", 0
	
introMessage:
	dat "Access Control Terminal", 0
	
command_table:
	
	dat cmd_help
	dat "help", 0
	
	dat cmd_direct
	dat "direct", 0
	
	dat 0
	
shell_instance:
	dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	
main:
	_loadBase(A)
	
	SET PUSH, SHELLINSTANCE_SIZE
	JSR [A + import_memory_allocateMemory]
	ADD SP, 1

	_loadBase(y)
	_push y
	SET PUSH, input_handler
	ADD [SP], Y
	SET [Y + shell_instance], A
	SET PUSH, A
	JSR [Y + import_shell_createShell]
	ADD SP, 3
	
	_push introMessage
	relCall writeResponseLine
	add sp, 1
	
	relCall promptCommand
	
	ret
	
signal_handler:
	ifn [sp + 1], SIGNAL_KILL
		jmp signal_handler_end

	_loadBase(x)
	_push SHELLINSTANCE_SIZE
	_push [x + shell_instance]
	callRelPtr import_shell_destroy
	callRelPtr import_memory_freeMemory
	add sp, 2
	
	_loadBase(x)
	_push x
	callRelPtr import_peLoader_unloadImage
	add sp, 1
	
	signal_handler_end:
	ret
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

promptCommand:
	_push shell_prompt
	relCall writeResponse
	add sp, 1
	ret

;ARG1 Relative Message
writeResponse:
	_loadBase(y)
	_push [sp+1]
	add [sp], y
	_push [Y + shell_instance]
	callRelPtr import_shell_writeString
	add sp, 2
	set pc, pop
	
;ARG1 Relative Message
writeResponseLine:
	_push [sp + 1]
	relCall writeResponse
	add sp, 1
	
	_loadBase(y)
	_push [Y + shell_instance]
	callRelPtr import_shell_newLine
	add sp, 1
	ret
	
;;A Will be set to base address of callee module
input_handler:
	_push a
	_push [sp + 2]
	_push [a + shell_instance]
	JSR [a + import_shell_processInput]
	add sp, 3
	
	ife a, 0
		ret
	
	_push a ; 2nd argument for process command
	
	_push 0 ;Replace all spaces with nulls to create null terminated string list
	_push 0x20 ;Space character
	_push a
	callRelPtr import_vfs_string_replace
	add sp, 3
	
	_push a ; First argument for process command
	relCall processCommand
	add sp, 2
	
	relCall promptCommand

	ret
	
;Arg1 number of strings in string list.
;ARG2 String list of command
processCommand:
	_sfBegin(0)
	_push I
	_push J
	_loadBase(I)
	
	set J, I
	add J, command_table
	
	processCommand_next:
		ife [J], 0
			jmpD(processCommand_unknown)
		
		_sfArg(push, 1)
		_push J
		add [sp], 1
		jsr [I + import_string_compare]
		add sp, 2
		
		ife a, 0
			jmpD(processCommand_found)
	
		_push J
		add [sp], 1
		jsr [I + import_string_length]
		_pop J
		add J, a
		add j, 1
		
		jmpU(processCommand_next)
	
	processCommand_unknown:
		relCall unknown_command
	
	processCommand_end:
		_pop J
		_pop I
		_sfEnd
		ret
		
	processCommand_found:
		
		_sfArg(push, 1)
		_sfArg(push, 0)
		add I, [J]
		jsr I
		add sp, 2
		jmpU(processCommand_end)


unknown_command_response:
	dat "Unknown command. Use help cmd.", 0
unknown_command:
	_loadBase(x)
	_push unknown_command_response
	relCall writeResponseLine
	add sp, 1
	ret

cmd_help_response:
	dat "CMD  Summary                    ", "direct Send raw packet.         ", "exit   Exits this program.      ", 0
cmd_help:
	_loadBase(x)
	_push cmd_help_response
	relCall writeResponse
	add sp, 1
	ret

cmd_direct_packet_start:
	dat 0
	
cmd_direct_packet_destIp:
	dat 0

cmd_direct_packet_port:
	dat 0
	
cmd_direct_packet_data:
	dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	dat 0, 0, 0, 0, 0, 0

cmd_direct_message_noParameters:
	dat "Specify <ip> <port> <o/c>", 0

cmd_direct_message_invalidIp:
	dat "Invalid IP Address.", 0
	
cmd_direct_message_failSend:
	dat "Driver failed to send packet.", 0

cmd_direct:
	_sfBegin(0)
	
	_sfArg(a, 0)
	
	ifn a, 3
		jmpD cmd_direct_noParameters
	
	;;Collect port
	;Get command
	_push 0 ; Space
	_push 2
	_sfArg(push, 1)
	callRelPtr import_string_indexOfString
	add sp, 3
	
	_push a
	callRelPtr import_string_stoi
	add sp, 1
	
	set [cmd_direct_packet_port], a
	
	;Get command string
	_push 0 ; Space
	_push 3
	_sfArg(push, 1)
	callRelPtr import_string_indexOfString
	add sp, 3
	
	_push a
	callRelPtr import_string_stoi
	add sp, 1
	
	set [cmd_direct_packet_data], a
	
	;Split Ip Address
	set [cmd_direct_packet_destIp], 0
	
	_push 0x0 ;Replace all periods with nulls to create null terminated string list
	_push 0x2E ;Replace all periods with nulls to create null terminated string list
	_sfArg(push, 1)
	add [sp], 7 ; Add 7, command length to get second string in string list (address)
	callRelPtr import_vfs_string_replace
	add sp, 3
	
	_push z
	
	ifn a, 3
		jmpD cmd_direct_invalidIp
	
	set z, 0
	cmd_direct_nextIpComponent:
	;Get IP Address (first part)
	ife z, 4
		jmpD cmd_direct_nextIpComponent_end
		
	shl [cmd_direct_packet_destIp], 4
	
	_push 0
	_push z
	_sfArg(push, 1)
	add [sp], 7 ; Add 7, command length to get second string in string list (address)
	callRelPtr import_string_indexOfString
	add sp, 3
	
	_push a
	callRelPtr import_string_stoi
	add sp, 1
	
	ifg a, 0xF
		jmpD cmd_direct_invalidIp
	
	bor [cmd_direct_packet_destIp], a
	add z, 1
	jmpU cmd_direct_nextIpComponent
	
	cmd_direct_nextIpComponent_end:
	_pop z
	
	;Send the packet
	relPushLabel cmd_direct_packet_start
	callRelPtr import_nic_send
	add sp, 1
	
	ife a, 0
		jmpD cmd_direct_failSend
	
	cmd_direct_end:
	_sfEnd
	ret
	
	
	cmd_direct_failSend:
	_push cmd_direct_message_failSend
	relCall writeResponseLine
	add sp, 1
	jmpU cmd_direct_end
	
	cmd_direct_noParameters:
	
	_push cmd_direct_message_noParameters
	relCall writeResponseLine
	add sp, 1
	jmpU cmd_direct_end

	cmd_direct_invalidIp:
	_pop z
	
	_push cmd_direct_message_invalidIp
	relCall writeResponseLine
	add sp, 1
	jmpU cmd_direct_end