#define GRAPHICS_INTERRUPTCODE_MAPSCREEN 0

#define GRAPHICS_VRAM_SIZE	384	;IF CHANGING THIS, BEWARE THAT userInterfaceState's SIZE macro assumes it is 384 and thus it must be changed as well
#define GRAPHICS_SCREENX	32
#define GRAPHICS_SCREENY	12

;cdecl, returns new cursor location
;ARG1 is pointer to video memory
;Arg2 is pointer to nullterminated string to be printed to screen
;Arg3 is cursor location
graphics_writeString:
	_sfBegin(0)
	_sfArg(c, 1)
	
	_sfArg(y, 0)	; Pointer to where in vram to write (added cursor offset) store in y
	_sfArgAdd(y, 2)
	
	graphics_write_copyLoop:
		ife [c], 0
			jmp graphics_write_end
			
			set a, y		; Calculate cursor position (relative to vram), Store in A
			_sfArgSub(a, 0) 
			
			ifl a, GRAPHICS_VRAM_SIZE	; If cursor exceeds max memory
				jmp graphics_write_copyLoop_writeCharacter
				
			_push c
			_push y
			
			_sfArg(push, 0)	
			call graphics_verticalShift
			add sp, 1
			
			_pop y
			_pop c
			
			sub y, GRAPHICS_SCREENX
		graphics_write_copyLoop_writeCharacter:
			set [y], [c]
			ifl [y], 0x0100
				bor [y], 0xE000
			add y, 1
			add c, 1
			
		jmp graphics_write_copyLoop
		
graphics_write_end:
	set a, y
	_sfArgSub(a, 0)
	_sfEnd
	ret

;cdecl, returns nothing
;ARG1 is pointer to video memory
graphics_verticalShift:
	
	SET A, 0
	SET Y, GRAPHICS_VRAM_SIZE
	SUB Y, GRAPHICS_SCREENX
	
	grapics_newLine_verticalRelocLoop:
		SET C, [SP+1]
		ADD C, A
		SET [C], [C + GRAPHICS_SCREENX]
		ADD A, 1
		IFN A, Y
			SET PC, grapics_newLine_verticalRelocLoop
	
	grapics_newLine_cleanNewLineLoop:
		SET C, [SP+1]
		ADD C, A
		SET [C], 0
		ADD A, 1
		IFN A, GRAPHICS_VRAM_SIZE
			SET PC, grapics_newLine_cleanNewLineLoop
	SET PC, POP
	
	
