;cdecl
;ARG1 string a, null terminated
;ARG2 string b
;returns 0 on equal
string_compare:
		SET A, [SP+1]
		SET C, [SP+2]
	
	string_compare_loop:
		IFN [A], [C]
			SET PC, string_compare_unequal
		
		IFE [A], 0
			SET PC, string_compare_equal
	
		IFE [C], 0
			SET PC, string_compare_equal
			
			ADD A, 1
			ADD C, 1
		SET PC, string_compare_loop
			
	string_compare_unequal:
		SET A, 0xFFFF
		SET PC, POP
		
	string_compare_equal:
		XOR A, A
		SET PC, POP
		
;Gets the address of a string in specified null delimited string list
;Arg1 the base address of the string list
;Arg2 the index of the string to find in the string list.
;Arg3 Delmiter character
string_indexOfString:
	_sfBegin(0)
	
	_sfArg(a, 0)
	_sfArg(x, 1)
	_sfArg(c, 2)
	
	string_indexOfString_next:
	
	ife x, 0
		jmp string_indexOfString_end
	
	ife [a], c
		sub x, 1
	
	add a, 1
	
	jmp string_indexOfString_next
	
	string_indexOfString_end:
	
	_sfEnd
	ret

;Arg1 Pointer to string to get integer value
;Returns integer value.
string_stoi:
	_sfBegin(0)
	_sfArg(y, 0)
	set a, 0
	string_stoi_next:
		ife [y], 0
			jmpD string_stoi_end
			
		ifg [y], 0x39
			jmpD string_stoi_end
			
		ifl [y], 0x30
			jmpD string_stoi_end
		
		mul a, 10
		
		set c, [y]
		sub c, 0x30 ; The ascii key for 0
		
		add a, c
		add y, 1
	jmp string_stoi_next
	
	string_stoi_end:
	_sfEnd
	ret


;cdecl converts wide-character string
;ARG1 is string to be converted
;ARG2 is dest
string_wideCharToSingleByte:
	set i, 0
	set j, [sp + 1]
	
	string_wideCharToSingleByte_next:
	set c, i
	div c, 2
	add c, [sp + 2]
	
	set x, i
	mod x, 2
	
	;x is hi or low
	;c is dest byte
	;j is source
	set y, [j]
	
	ife x, 0
		set [c], 0
	
	ife y, 0
		jmp string_wideCharToSingleByte_end
	
	ife x, 1
		shl y, 8
	
	bor [c], y
	add i, 1
	add j, 1
	jmp string_wideCharToSingleByte_next
	
	string_wideCharToSingleByte_end:
	ret
	

;cdecl converts singlebytestring to wide-character string
;ARG1 is dest buffer
;ARG2 is string to be converted
;ARG3 is length
string_singlebyteToWideChar:
	SET PUSH, I
	
	SET I, 0
	
	string_singlebyteToWideChar_wordLoop:
	
		IFE I, [SP + 4]
			SET PC, string_singlebyteToWideChar_end
			
		SET Y, I
		DIV Y, 2
		ADD Y, [SP + 3]
		SET A, [Y]
		
		SET Y, I
		MOD Y, 2
		MUL Y, 8
		SET C, 0x00FF
		SHL C, Y
		
		AND C, A
		
		IFN Y, 0
			SHR C, 8
			
		SET A, I
		ADD A, [SP + 2]
		SET [A], C
		
		ADD I, 1
		SET PC, string_singlebyteToWideChar_wordLoop
		
	string_singlebyteToWideChar_end:
	
	SET I, POP
	SET PC, POP

;cdecl, replaces characters in a string
;ARG1 ptr to string
;ARG2 is char to seek
;ARG3 is char to replace it with
;Return number of replaces
string_replace:
	_push i
	_push j
	
	XOR A, A
	xor i, i
	
	string_replace_loop:
		SET C, [SP+3] ;arg1
		ADD C, A
		
		IFE [C], 0
			SET PC, string_replace_loop_end
		
		IFE [C], [SP+4] ;arg2
			sti [C], [SP+5] ;arg3
		
		ADD A, 1
		SET PC, string_replace_loop
	string_replace_loop_end:
	
	set a, i
	_pop j
	_pop i
	SET PC, POP
	
;cdecl, gets length of string.
;ARG1 ptr to string
string_length:
	
	XOR A, A
	
	string_length_findTerminatorLoop:
		SET C, [SP+1] ;arg1
		ADD C, A
		
		IFE [C], 0
			SET PC, string_length_findTerminatorLoop_end
		
		ADD A, 1
		SET PC, string_length_findTerminatorLoop
	 string_length_findTerminatorLoop_end:
	
	SET PC, POP

;cdecl
;ARG1 string a, null terminated
;ARG2 string b
;returns 0 on equal
string_sbCompare:
		_sfBegin(0)
		_push i
		_push j
		
		_sfArg(i, 0)
		_sfArg(j, 1)
		
		string_sbCompare_loop:
			IFN [i], [j]
				jmp string_sbCompare_unequal
		
			sti a, [i]
			
			ifb a, 0xFF00
				jmp string_sbCompare_loop
	
			ifb [j - 1], 0xFF00
				jmp string_sbCompare_loop
			
	string_sbCompare_equal:
		set a, 0
		jmp string_sbCompare_end
		
	string_sbCompare_unequal:
		set a, 0xFFFF

	string_sbCompare_end:
		_pop j
		_pop i
		_sfEnd()
		ret
		

;cdecl
;ARG1 string buffer
;returns void
string_reverse:
		_sfBegin(0)
		
		_push i
		_push j
		
		set i, 0
		
		_sfArg(push, 0)
		call string_length
		set j, a ; J is string length
		sub j, 1
		_pop a ;A is pointer to string
	
	string_reverse_next:
		ife i, j
			jmp string_reverse_end
		ifg i, j
			jmp string_reverse_end
		
		;Swap [a + i] with [a + j]
		set x, a
		add x, i
		_push [x]
		set y, a
		add y, j
		_push [y]
		
		_pop [x]
		_pop [y]
		
		add i, 1
		sub j, 1
		
		jmp string_reverse_next
		
	string_reverse_end:
		_pop i
		_pop j
		_sfEnd
		ret
		

;cdecl
;ARG1 string buffer, should be at least 6 characters in length
;ARG2 word integer
;returns pointer to end of string (null terminator)
string_itoa:
		_sfBegin(0)
		
		_sfArg(a, 0)
		_sfArg(c, 1)
		
		ife c, 0
			jmp string_itoa_zero
			
		ifa c, -1
			jmp string_itoa_next
		
		xor c, 0xFFFF
		add c, 1
	string_itoa_next:
	
		set [a], c
		mod [a], 10
		add [a], '0'
		
		add a, 1
		set [a], 0
		div c, 10
		ifg c, 0
			jmp string_itoa_next
		
		_sfArg(c, 0)
		ifa c, -1
			jmp string_itoa_end
		
		set [a], '-'
		add a, 1
		set [a], 0
		
		jmp string_itoa_end
		
	string_itoa_zero:
		set [a], '0'
		add a, 1
		set [a], 0
	string_itoa_end:

		_push a ;Preserve pointer to last character
		
		_sfArg(a, 0)
		_push a
		call string_reverse
		add sp, 1

		_pop a
		_sfEnd()
		ret
		